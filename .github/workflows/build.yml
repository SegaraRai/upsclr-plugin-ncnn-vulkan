---
name: Build and Release

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

permissions:
  contents: write
  actions: read
  packages: write

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 60

    strategy:
      matrix:
        include:
          - preset: windows-clang-x64-ci
            arch: x64
            config: Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          git checkout f26ec398c25c4980f33a50391f00a75f7ad62ef7
          .\bootstrap-vcpkg.bat
          echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" >> $env:GITHUB_ENV
          echo "${{ github.workspace }}\vcpkg" >> $env:GITHUB_PATH

      - name: Setup vcpkg binary caching
        shell: pwsh
        env:
          USERNAME: ${{ github.repository_owner }}
          VCPKG_EXE: ${{ github.workspace }}\vcpkg\vcpkg.exe
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
          VCPKG_BINARY_SOURCES: clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite
        run: |
          .$(${{ env.VCPKG_EXE }} fetch nuget) `
            sources add `
            -Source "${{ env.FEED_URL }}" `
            -StorePasswordInClearText `
            -Name GitHubPackages `
            -UserName "${{ env.USERNAME }}" `
            -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          .$(${{ env.VCPKG_EXE }} fetch nuget) `
            setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" `
            -Source "${{ env.FEED_URL }}"
          echo "VCPKG_BINARY_SOURCES=${{ env.VCPKG_BINARY_SOURCES }}" >> $env:GITHUB_ENV

      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: build
          key: >-
            ${{ runner.os }}-cmake-build-${{ matrix.preset }}-${{
            hashFiles('CMakeLists.txt', 'src/**/*.cpp', 'src/**/*.hpp') }}
          restore-keys: |
            ${{ runner.os }}-cmake-build-${{ matrix.preset }}-
            ${{ runner.os }}-cmake-build-

      - name: Configure CMake
        run: |
          cmake --preset ${{ matrix.preset }}

      - name: Build
        run: |
          cmake --build build --config ${{ matrix.config }} --parallel

      - name: Prepare artifacts
        run: |
          mkdir artifacts
          copy "build\${{ matrix.config }}\upsclr-plugin-ncnn-vulkan.dll" ^
            artifacts\
          copy "build\${{ matrix.config }}\upsclr-ncnn-vulkan.exe" ^
            artifacts\

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: >-
            upsclr-plugin-ncnn-vulkan-${{ matrix.arch }}-${{ matrix.config }}
          path: artifacts/
          retention-days: 30

  package:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'

    steps:
      - name: Download x64 Release artifacts
        uses: actions/download-artifact@v4
        with:
          name: upsclr-plugin-ncnn-vulkan-x64-Release
          path: package/x64/

      - name: Create release package
        run: |
          cd package
          zip -r ../upsclr-plugin-ncnn-vulkan-binaries.zip .
          cd ..

      - name: Verify package structure
        run: |
          echo "Package contents:"
          unzip -l upsclr-plugin-ncnn-vulkan-binaries.zip

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: upsclr-plugin-ncnn-vulkan-binaries
          path: package/
          retention-days: 90

      - name: Upload to release (if release event)
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./upsclr-plugin-ncnn-vulkan-binaries.zip
          asset_name: upsclr-plugin-ncnn-vulkan-binaries.zip
          asset_content_type: application/zip
